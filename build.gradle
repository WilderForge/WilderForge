buildscript {
	dependencies {
		classpath group: 'commons-io', name: 'commons-io', version: commonsIOVersion
		classpath files('libs/wilderworkspace-4.0.0.0.jar')
	}
	repositories {
		mavenCentral()
	}
}


plugins {
	id 'java-library'
	id 'maven-publish'
	id 'eclipse'
}
apply plugin: 'com.wildermods.workspace'

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url "https://maven.fabricmc.net/"
	}
}

sourceCompatibility = '17'
targetCompatibility = '17'

version = wilderForgeVersion
group = "com.wildermods"
archivesBaseName = "wilderforge"

dependencies {

	implementation group: 'net.oneandone.reflections8', name: 'reflections8', version: '0.11.7'
	implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '6.0-alpha-3'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.24.2'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.24.2'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.2'
	
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'
	
	
	/**********
	don't alter the dependencies below
	***********/
	
	//Wildermyth, Scratchpad
	compileOnly fileTree(dir: './bin/', include: ['*.jar'])
	
	//All dependencies of Wildermyth itself
	compileOnly fileTree(dir: './bin/lib/', include: ['*.jar'])
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filesMatching('fabric.mod.json') {
    	logger.lifecycle("Found fabric.mod.json:")
        filter(ReplaceTokens, tokens: [
            'WILDERFORGE_VERSION': project.version.toString()
        ])
    }
}

ext.mavenLocalUrl = repositories.mavenLocal().url.toString()

jar {
	manifest {
		attributes(
			'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
			'MixinConfigs': 'mixins.json',
			'Main-Class': 'net.fabricmc.loader.impl.launch.knot.KnotClient',
			'Specification-Version': 8.0,
			'Multi-Release': 'true'
		)
	}
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

tasks.register('checkArtifactExists') {
    doLast {
        def repoUrl = project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl
        def artifactPath = "${repoUrl}/${project.group.replace('.', '/')}/${project.archivesBaseName}/${project.version}/${project.archivesBaseName}-${project.version}.jar"
        logger.lifecycle("Checking if artifact exists at: $artifactPath")
        
        if (artifactPath.startsWith('file:/')) {
            // Handle file URLs
            def file = new File(new URI(artifactPath))
            if (file.exists()) {
                throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        } else {
            // Handle HTTP URLs
            def url = new URL(artifactPath)
            def connection = url.openConnection()
            connection.setRequestMethod('HEAD')
            if (connection.responseCode == 200) {
				throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        }
        logger.lifecycle("Artifact does not exist, proceeding with publish.")
    }
}

tasks.named('publish') {
    dependsOn 'checkArtifactExists'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            // Attach sources JAR to the publication
            artifact sourceJar
        }
    }

    repositories {
        maven {
            url = uri(project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl) // Default to mavenLocal if no custom URL is provided
        }
    }
}
