name: Cloudflare DDNS Update

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  update-dns:
    runs-on: [self-hosted, linux]

    steps:
      - name: Get Public IP Address
        id: get_ip
        run: |
          set -e # Exit on errors
          PUBLIC_IP=$(curl -sf https://api.ipify.org) # -s for silent, -f to fail on non-success HTTP codes
          if [ -z "$PUBLIC_IP" ]; then
            echo "Failed to retrieve public IP address."
            exit 1
          fi
          echo "ip=$PUBLIC_IP" >> $GITHUB_ENV
          
      - name: Check if IP has changed
        id: check_ip
        env:
          LAST_KNOWN_IP: ${{ secrets.LAST_KNOWN_IP }}
          PUBLIC_IP: ${{ env.ip }}
        run: |
          if [ "$LAST_KNOWN_IP" == "$PUBLIC_IP" ]; then
            echo "IP has not changed. Skipping DNS update."
            exit 0
          fi

      - name: Update Cloudflare DNS
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_RECORD_ID: ${{ secrets.CF_RECORD_ID }}
          CF_DOMAIN: "maven.wildermods.com"
          PUBLIC_IP: ${{ env.ip }}
        run: |
          set -e # Exit on errors
          if [ -z "$CF_API_TOKEN" ] || [ -z "$CF_ZONE_ID" ] || [ -z "$CF_RECORD_ID" ] || [ -z "$CF_DOMAIN" ]; then
            echo "Missing required environment variables for Cloudflare API."
            exit 1
          fi
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PUT "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records/$CF_RECORD_ID" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "A",
              "name": "'"$CF_DOMAIN"'",
              "content": "'"$PUBLIC_IP"'",
              "ttl": 120,
              "proxied": false
            }')
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Cloudflare API update failed. HTTP status: $RESPONSE"
            cat response.json
            exit 1
          fi
          echo "Cloudflare DNS record updated successfully."

      - name: Update LAST_KNOWN_IP secret
        env:
          LAST_KNOWN_IP: ${{ secrets.LAST_KNOWN_IP }}
          PUBLIC_IP: ${{ env.ip }}
          GB_SECRET_WRITER: ${{ secrets.GB_SECRET_WRITER }}
        run: |
          if [[ "${{ env.LAST_KNOWN_IP }}" != "${{ env.PUBLIC_IP }}" ]]; then
            echo "Updating LAST_KNOWN_IP secret"
            
            # GitHub API URL to get the repository's public key
            API_URL="https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key"
            
            # Get the public key from GitHub
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GB_SECRET_WRITER }}" -H "Accept: application/vnd.github.v3+json" "$API_URL")
            PUBLIC_KEY=$(echo "$RESPONSE" | jq -r .key)
            KEY_ID=$(echo "$RESPONSE" | jq -r .key_id)
            
            if [[ -z "$PUBLIC_KEY" || -z "$KEY_ID" ]]; then
              echo "Failed to retrieve public key from GitHub"
              exit 1
            fi
            
            # Encrypt the PUBLIC_IP value using the public key (using OpenSSL)
            ENCRYPTED_IP=$(echo -n "${{ env.PUBLIC_IP }}" | openssl rsautl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 --decode) | base64)
            
            # GitHub API URL to update the secret for the repository
            API_URL="https://api.github.com/repos/${{ github.repository }}/actions/secrets/LAST_KNOWN_IP"
            
            # Create the secret payload
            PAYLOAD=$(jq -n --arg value "$ENCRYPTED_IP" --arg key_id "$KEY_ID" \
              '{"encrypted_value": $value, "key_id": $key_id}')
        
            # Call GitHub API to update the secret
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json -X PUT "$API_URL" \
              -H "Authorization: Bearer ${{ secrets.GB_SECRET_WRITER }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$PAYLOAD")
        
            # Check for successful response (HTTP 200)
            if [ "$RESPONSE" -eq 200 ]; then
              echo "Successfully updated LAST_KNOWN_IP secret."
            else
              echo "Failed to update LAST_KNOWN_IP secret. HTTP Status: $RESPONSE"
              cat response.json
              exit 1
            fi
          else
            echo "IP has not changed, skipping update."
          fi
