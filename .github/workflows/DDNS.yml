name: Cloudflare DDNS Update

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  update-dns:
    runs-on: [self-hosted, linux]

    steps:
      - name: Get Public IP Address
        id: get_ip
        run: |
          set -e # Exit on errors
          PUBLIC_IP=$(curl -sf https://api.ipify.org) # -s for silent, -f to fail on non-success HTTP codes
          if [ -z "$PUBLIC_IP" ]; then
            echo "Failed to retrieve public IP address."
            exit 1
          fi
          echo "::add-mask::$PUBLIC_IP" # Mask the public IP immediately
          echo "ip=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Update Cloudflare DNS
        env:
          # Only the secrets necessary for this step
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_RECORD_ID: ${{ secrets.CF_RECORD_ID }}
          CF_DOMAIN: "maven.wildermods.com"
          PUBLIC_IP: ${{ env.ip }}
        run: |
          set -e # Exit on errors
          if [ -z "$CF_API_TOKEN" ] || [ -z "$CF_ZONE_ID" ] || [ -z "$CF_RECORD_ID" ] || [ -z "$CF_DOMAIN" ]; then
            echo "Missing required environment variables for Cloudflare API."
            exit 1
          fi
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PUT "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/dns_records/$CF_RECORD_ID" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "A",
              "name": "'"$CF_DOMAIN"'",
              "content": "'"$PUBLIC_IP"'",
              "ttl": 120,
              "proxied": true
            }')
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Cloudflare API update failed. HTTP status: $RESPONSE"
            cat response.json
            exit 1
          fi
          echo "Cloudflare DNS record updated successfully."
